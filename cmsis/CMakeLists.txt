PROJECT(stm32cmsis)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
ENABLE_LANGUAGE(ASM)

INCLUDE(${CMAKE_CURRENT_LIST_DIR}/../cmake/locate_stdperiph_source.cmake)

STM32_LOCATE_STDPERIPH_LIB()
INCLUDE_DIRECTORIES(${STM32_CMSIS_INCLUDE_DIRECTORIES})
SET(CMSIS_HEADERS ${STM32_CMSIS_HEADERS})

IF(${STM32_FAMILY} STREQUAL "F0")
    
    SET(CMSIS_SOURCES
        ${STM32_CMSIS_PATH_F0}/Device/ST/STM32F0xx/Source/Templates/system_stm32f0xx.c
    )
    SET(STARTUP_PREFIX ${STM32_CMSIS_PATH_F0}/Device/ST/STM32F0xx/Source/Templates/gcc_ride7/startup_stm32f)
    
ELSEIF(${STM32_FAMILY} STREQUAL "F1")
    
    SET(CMSIS_SOURCES
        ${STM32_CMSIS_PATH_F1}/Device/ST/STM32F10x/Source/Templates/system_stm32f10x.c
    )
    SET(STARTUP_PREFIX ${STM32_CMSIS_PATH_F1}/Device/ST/STM32F10x/Source/Templates/gcc_ride7/startup_stm32f10x_)
    
ELSEIF(${STM32_FAMILY} STREQUAL "F2")
    
    SET_IF_EXISTS(TEMPLATES_PATH "${STM32_CMSIS_PATH_F2}/Device/ST/STM32F2xx/Source/Templates")
    IF(NOT TEMPLATES_PATH)
        MESSAGE(FATAL_ERROR "Templates not found")
    ENDIF()
    
    SET(CMSIS_SOURCES ${TEMPLATES_PATH}/system_stm32f2xx.c)
    SET_IF_EXISTS(GCC_TEMPLATES_PATH ${TEMPLATES_PATH}/gcc_ride7)
    SET_IF_EXISTS(GCC_TEMPLATES_PATH ${TEMPLATES_PATH}/gcc)
    IF(NOT GCC_TEMPLATES_PATH)
        MESSAGE(FATAL_ERROR "GCC templates not found")
    ENDIF()
    
    SET(STARTUP_PREFIX ${GCC_TEMPLATES_PATH}/startup_stm32f)
    SET(STARTUP_PREFIX_ALT ${GCC_TEMPLATES_PATH}/startup_stm32f2xx)

ELSEIF(${STM32_FAMILY} STREQUAL "F4")
    
    SET(CMSIS_SOURCES 
        ${STM32_CMSIS_PATH_F4}/Device/ST/STM32F4xx/Source/Templates/system_stm32f4xx.c
    )
    SET(STARTUP_PREFIX ${STM32_CMSIS_PATH_F2}/Device/ST/STM32F4xx/Source/Templates/gcc_ride7/startup_stm32f)
    
ENDIF()

LIST(APPEND CMSIS_SOURCES stm32fx_sys.c)

STRING(TOLOWER ${STM32_FAMILY} STM32_FAMILY_LOWER)

SET(CMSIS_LINKER_SCRIPT 
    ${CMAKE_CURRENT_SOURCE_DIR}/stm32${STM32_FAMILY_LOWER}_memory.ld.in
    ${CMAKE_CURRENT_SOURCE_DIR}/stm32${STM32_FAMILY_LOWER}_sections.ld.in
    ${CMAKE_CURRENT_SOURCE_DIR}/stm32fx_flash.ld.in
)

INCLUDE_DIRECTORIES(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${STM32_STDPERIPH_INCLUDE_DIRECTORIES_${STM32_FAMILY}}
)

ADD_CUSTOM_TARGET(cmsis_${STM32_FAMILY_LOWER})

STM32_GET_SELECTED_CHIP_TYPES(CMSIS_BUILD_FOR_CHIP_TYPES)
FOREACH(CHIP_TYPE ${CMSIS_BUILD_FOR_CHIP_TYPES})
    STRING(TOLOWER ${CHIP_TYPE} CHIP_TYPE_LOWER)
    
    SET(CMSIS_STARTUP_FILE ${STARTUP_PREFIX}${CHIP_TYPE_LOWER}.s)
    GET_FILENAME_COMPONENT(CMSIS_STARTUP_FILE_NEW_NAME ${CMSIS_STARTUP_FILE} NAME)
    IF(NOT EXISTS "${CMSIS_STARTUP_FILE}")
        SET(CMSIS_STARTUP_FILE ${STARTUP_PREFIX_ALT}.s)
    ENDIF()
    
    SET(CMSIS_EXTRA_HEADER "${STM32_CMSIS_PATH_F2}/Device/ST/STM32F2xx/Include/stm32f${CHIP_TYPE_LOWER}.h")
    IF(EXISTS "${CMSIS_EXTRA_HEADER}")
        LIST(APPEND CMSIS_HEADERS "${CMSIS_EXTRA_HEADER}")
    ENDIF()
    
    LIST(APPEND CMSIS_STARTUP_FILES ${CMSIS_STARTUP_FILE})
    LIST(APPEND CMSIS_LIBRARIES cmsis_${STM32_FAMILY_LOWER}_${CHIP_TYPE_LOWER})
    SET(TARGET_NAME cmsis_${STM32_FAMILY_LOWER}_${CHIP_TYPE_LOWER})
    ADD_LIBRARY(${TARGET_NAME} ${CMSIS_SOURCES})

    # it is assumed in HAL library that standard integer types are available
    SET_PROPERTY(TARGET ${TARGET_NAME} APPEND_STRING PROPERTY COMPILE_FLAGS " -include stdint.h ")

    STM32_SET_CHIP_DEFINITIONS(${TARGET_NAME} ${CHIP_TYPE})
    ADD_DEPENDENCIES(cmsis_${STM32_FAMILY_LOWER} ${TARGET_NAME})

    INSTALL(FILES ${CMSIS_STARTUP_FILE} DESTINATION share/cmsis/ RENAME ${CMSIS_STARTUP_FILE_NEW_NAME})
ENDFOREACH()

INSTALL(TARGETS ${CMSIS_LIBRARIES} RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
INSTALL(FILES ${CMSIS_HEADERS} DESTINATION include/stm32${STM32_FAMILY_LOWER})
INSTALL(FILES ${CMSIS_LINKER_SCRIPT} DESTINATION share/cmsis/)
